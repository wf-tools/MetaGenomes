<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style x:Key="BaseLabel" TargetType="{x:Type Label}" BasedOn="{x:Null}">
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="Meiryo UI" />
    </Style>

    <Style x:Key="PropatiesLabel" TargetType="{x:Type Label}" BasedOn="{x:Null}">
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="HorizontalAlignment" Value="Left" />
    </Style>

    <Style x:Key="PropatiesTextBox" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Width" Value="100" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Style x:Key="LabelLikeTextBox" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style x:Key="SmallLabelLikeTextBox" TargetType="{x:Type TextBox}" BasedOn="{x:Null}">
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style x:Key="FlatButton" TargetType="Button" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="FontFamily" Value="Times New Roman" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Background" Value="#eae7e7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border CornerRadius="2" Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="DarkGray"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property = "Foreground" Value="LightGray"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HeaderLabel" TargetType="{x:Type Label}" >
        <Setter Property="Background"                   Value="LightGray" />
        <Setter Property="FontWeight"                   Value="Bold"/>
        <Setter Property="FocusVisualStyle"             Value="{x:Null}"/>
        <Setter Property="HorizontalAlignment"          Value="Stretch"/>
        <Setter Property="VerticalAlignment"            Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment"   Value="Center"/>
        <Setter Property="VerticalContentAlignment"     Value="Center"/>
    </Style>

    <Style x:Key="InfoLabel" TargetType="{x:Type Label}" >
        <Setter Property="Background"                   Value="White" />
        <Setter Property="FontWeight"                   Value="Bold"/>
        <Setter Property="FontFamily"                   Value="Meiryo UI"/>
        <Setter Property="FontSize"                       Value="20"/>
        <Setter Property="HorizontalAlignment"          Value="Left"/>
        <Setter Property="VerticalAlignment"            Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="LightBlue"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property = "Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseComboBox" TargetType="{x:Type ComboBox}" BasedOn="{x:Null}">
        <Setter Property="FontFamily" Value="Meiryo UI" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Width" Value="280" />
        <Setter Property="Height" Value="25" />
        <Setter Property="Background" Value="LightGray"/>

        <Style.Triggers>
            <!--IsReadOnlyと連動して、IsHitTestVisibleとIsTabStopも変更する-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#eae7e7"/>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="IsHitTestVisible" Value="False"/>
                <Setter Property="IsTabStop" Value="False"/>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="False">
                <Setter Property="IsHitTestVisible" Value="True"/>
                <Setter Property="IsTabStop" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="VerticalTab" TargetType="{x:Type TabItem}" >
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <TransformGroup>
                    <RotateTransform Angle="90"/>
                </TransformGroup>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Triggerを使ったスタイル -->
    <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border x:Name="Border" Margin="1" BorderThickness="0" Background="Gray" Padding="10, 5" CornerRadius="4" >
                        <TextBlock x:Name="TextContent" HorizontalAlignment="Center" Text="{TemplateBinding Content}" FontSize="{TemplateBinding FontSize}" FontWeight="Bold" Foreground="White" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CheckBox.IsChecked" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="DeepSkyBlue"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="style" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid>
                        <Border x:Name="Border" Background="Transparent">
                            <TextBlock FontSize="12" FontFamily="Segoe UI Light">
                        <ContentPresenter></ContentPresenter>
                            </TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="Red"></Setter>
                        </Trigger>
                        <Trigger Property="ComboBoxItem.IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="LightGray"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>
